diff --git a/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/BasePackage.java b/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/BasePackage.java
index ff8e32e..b26d607 100644
--- a/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/BasePackage.java
+++ b/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/BasePackage.java
@@ -5,6 +5,7 @@ import android.content.Context;
 import expo.modules.core.interfaces.ApplicationLifecycleListener;
 import expo.modules.core.interfaces.InternalModule;
 import expo.modules.core.interfaces.Package;
+import expo.modules.core.interfaces.ReactActivityHandler;
 import expo.modules.core.interfaces.ReactActivityLifecycleListener;
 import expo.modules.core.interfaces.ReactNativeHostHandler;
 import expo.modules.core.interfaces.SingletonModule;
@@ -49,4 +50,9 @@ public class BasePackage implements Package {
   public List<ReactActivityLifecycleListener> createReactActivityLifecycleListeners(Context activityContext) {
     return Collections.emptyList();
   }
+
+  @Override
+  public List<ReactActivityHandler> createReactActivityHandlers(Context activityContext) {
+    return Collections.emptyList();
+  }
 }
diff --git a/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/ModulePriorities.kt b/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/ModulePriorities.kt
new file mode 100644
index 0000000..7eb2d68
--- /dev/null
+++ b/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/ModulePriorities.kt
@@ -0,0 +1,25 @@
+package expo.modules.core
+
+/**
+ * This class determines the order of the following handlers/listeners
+ * - {@link ReactNativeHostHandler}
+ * - {@link ApplicationLifecycleListener}
+ * - {@link ReactActivityLifecycleListener}
+ * - {@link ReactActivityHandler}
+ *
+ * The priority is only for internal use and we maintain a pre-defined {@link SUPPORTED_MODULES} map.
+ */
+object ModulePriorities {
+  fun get(packageName: String?): Int {
+    return packageName?.let {
+      return SUPPORTED_MODULES[it] ?: 0
+    } ?: 0
+  }
+
+  private val SUPPORTED_MODULES = mapOf(
+    // {key} to {value}
+    // key: full qualified class name
+    // value: priority value, the higher value takes precedence
+    "expo.modules.updates.UpdatesPackage" to 10,
+  )
+}
diff --git a/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/Package.java b/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/Package.java
index 8ab647f..f5c6a84 100644
--- a/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/Package.java
+++ b/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/Package.java
@@ -43,4 +43,8 @@ public interface Package {
   default List<? extends ReactActivityLifecycleListener> createReactActivityLifecycleListeners(Context activityContext) {
     return Collections.emptyList();
   }
+
+  default List<? extends ReactActivityHandler> createReactActivityHandlers(Context activityContext) {
+    return Collections.emptyList();
+  }
 }
diff --git a/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/ReactActivityHandler.kt b/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/ReactActivityHandler.kt
new file mode 100644
index 0000000..b6286c6
--- /dev/null
+++ b/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/ReactActivityHandler.kt
@@ -0,0 +1,18 @@
+package expo.modules.core.interfaces
+
+import android.app.Activity
+import com.facebook.react.ReactRootView
+
+/**
+ * A handler API for modules to override default ReactActivity behaviors.
+ * Used by {@link ReactActivityDelegateWrapper}
+ */
+interface ReactActivityHandler {
+  /**
+   * Given modules a chance to override the default {@link ReactRootView}
+   * @return the override ReactRootView instance or null if not to override
+   */
+  fun createReactRootView(activity: Activity): ReactRootView? {
+    return null
+  }
+}
diff --git a/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/ReactNativeHostHandler.kt b/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/ReactNativeHostHandler.kt
index 4215d1d..39b903f 100644
--- a/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/ReactNativeHostHandler.kt
+++ b/node_modules/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/ReactNativeHostHandler.kt
@@ -37,6 +37,8 @@ interface ReactNativeHostHandler {
     return null
   }
 
+  //region event listeners
+
   /**
    * Given chance for JSI modules to register, e.g. for react-native-reanimated
    *
@@ -48,4 +50,16 @@ interface ReactNativeHostHandler {
     useDeveloperSupport: Boolean
   ) {
   }
+
+  /**
+   * Callback before {@link ReactInstanceManager} creation
+   */
+  fun onWillCreateReactInstanceManager(useDeveloperSupport: Boolean) {}
+
+  /**
+   * Callback after {@link ReactInstanceManager} creation
+   */
+  fun onDidCreateReactInstanceManager(useDeveloperSupport: Boolean) {}
+
+  //endregion
 }
